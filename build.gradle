apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'spring-boot'

def __env = 'local'

if(System.getProperty('env')){
	__env = System.getProperty('env')
}

def __set = 'default'

if(System.getProperty('set')){
	__set = System.getProperty('set')
}

println "Building $name for enviroment $__env, using card set $__set"

buildscript {
	repositories { mavenCentral() }
	dependencies { classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.5.RELEASE' }
}

repositories { mavenCentral() }

dependencies {
	compile 'org.springframework.boot:spring-boot-starter-web:1.2.5.RELEASE'
	compile 'org.springframework.boot:spring-boot-starter-websocket:1.2.5.RELEASE'

	compile 'org.springframework.boot:spring-boot-starter-actuator:1.2.5.RELEASE'

	compile 'org.springframework.boot:spring-boot-starter-logging:1.2.5.RELEASE'

	compile 'org.springframework.data:spring-data-jpa:1.8.2.RELEASE'
	compile 'org.springframework.data:spring-data-mongodb:1.7.2.RELEASE'

	compile 'org.springframework:spring-messaging'

	compile 'com.fasterxml.jackson.core:jackson-databind:2.5.4'
	compile 'org.codehaus.groovy:groovy-all:2.4.1'

	testCompile 'junit:junit:4.4'
}

sourceCompatibility = 1.7
version = '0.0.1'
jar {
	manifest {
		attributes 'Implementation-Title': 'Deck Builder', 'Implementation-Version': version
	}
}

test { systemProperties 'property': 'value' }

bootRun { addResources = false }

sourceSets {
	main {
		resources {
			srcDirs = ['src/main/resources', "src/env/resources/$__env", "src/cards/set/$__set", "src/web/resources"]
		}
	}
}